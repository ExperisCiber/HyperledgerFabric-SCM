/** 
  * A business network for shipping perishable goods 
  * The cargo is temperature controlled and contracts 
  * can be negociated based on the temperature 
  * readings received for the cargo 
  */ 
 
namespace org.acme.shipping.perishable 
 
/** 
 * The type of perishable product being shipped 
 */ 
enum ProductType { 
  o BANANAS 
  o APPLES 
  o PEARS 
  o PEACHES 
  o COFFEE 
} 
 
/** 
 * The shipment status of a production lot 
 */ 
enum ShipmentStatus { 
  o CREATED 
  o IN_TRANSIT 
  o ARRIVED 
} 
 
/** 
 * An abstract transaction that is related to a production lot 
 */ 
abstract transaction ProductionLotTransaction {
    --> ProductionLot productionLot
} 
 
/** 
 * An abstract transaction that is related to a batch 
 */ 
abstract transaction BatchTransaction {
    --> Batch batch
}

transaction setup{
}

/** 
 * A transaction to create a contract
 */ 
transaction CreateContract {
  o String contractId 
  --> Grower grower 
  --> Shipper shipper 
  --> Importer importer 
  o DateTime arrivalDateTime 
  o Double unitPrice 
  o Double minTemperature 
  o Double maxTemperature 
  o Double minPenaltyFactor 
  o Double maxPenaltyFactor 
}

/** 
 * A transaction to create a batch
 */
transaction CreateProductionLot {
  --> Grower grower 
  o String productionLotId
  o ProductType productType
  o DateTime expirationDate 
  o Long quantity 
  --> Contract contract 
}

 
/** 
 * A temperature reading for a shipment. E.g. received from a 
 * device within a temperature controlled shipping container 
 */ 
transaction TemperatureReading extends ProductionLotTransaction { 
  o Double centigrade 
} 
 
/** 
 * Quality inspection certificate for production lot.  
 */ 
transaction CertificateGranted extends ProductionLotTransaction {
} 
 
/** 
 * Customs clearance from customs. 
 */ 
transaction ClearanceGranted extends ProductionLotTransaction { 
} 

/** 
 * A notification that a shipment has been issued by the 
 * shipper
 */ 
transaction ShipmentIssued extends ProductionLotTransaction { 
} 

/** 
 * A notification that a shipment has been received by the 
 * importer and that funds should be transferred from the importer 
 * to the grower to pay for the shipment. 
 */ 
transaction ShipmentReceived extends ProductionLotTransaction {
  --> Importer importer
} 
 
/** 
 * A transaction to change ownership and transfer funds 
 */ 
transaction PurchaseLot extends ProductionLotTransaction { 
} 
 
/** 
 * A transaction to change ownership and transfer funds 
 */ 
transaction PurchaseBatch extends BatchTransaction {
  --> Supermarket supermarket
} 
 
/** 
 * A transaction to create a batch
 */ 
transaction CreateBatch extends ProductionLotTransaction { 
  o String batchId
  o Long quantity 
  o Long soldQuantity
} 
 
/** 
 * A transaction to purchase a quantity of a batch
 */ 
transaction PurchaseProducts extends BatchTransaction {
  o String productId
  o Long quantity
  --> Consumer consumer
} 
 
/** 
 * A productionlot being tracked as an asset on the ledger 
 */ 
asset ProductionLot identified by productionLotId { 
  --> Grower grower 
  --> Importer importer optional 
  o String productionLotId 
  o ProductType productType 
  o DateTime expirationDate
  o ShipmentStatus shipmentStatus 
  o Long quantity 
  o CertificateGranted[] certificateGranted optional 
  o ClearanceGranted[] clearanceGranted optional 
  o TemperatureReading[] temperatureReadings optional
  --> Contract contract 
} 
 
/** 
 * Defines a contract between a Grower and an Importer to ship using 
 * a Shipper, paying a set unit price. The unit price is multiplied by 
 * a penality factor proportional to the deviation from the min and max 
 * negociated temperatures for the shipment. 
 */ 
asset Contract identified by contractId { 
  o String contractId 
  --> Grower grower 
  --> Shipper shipper 
  --> Importer importer 
  o DateTime arrivalDateTime 
  o Double unitPrice 
  o Double minTemperature 
  o Double maxTemperature 
  o Double minPenaltyFactor 
  o Double maxPenaltyFactor 
} 
 
asset Batch identified by batchId {
  o String batchId
  --> ProductionLot productionLot 
  o Long quantity 
  o Long soldQuantity
  --> Supermarket supermarket optional 
} 

asset Products identified by productId {
  o String productId
  --> Batch batch
  --> Consumer consumer
  o Long quantity
}
 
/** 
 * A concept for a simple street address 
 */ 
concept Address { 
  o String city optional 
  o String country 
  o String street optional 
  o String zip optional 
} 
 
/** 
 * An abstract participant type in this business network 
 */ 
abstract participant Business identified by name { 
  o String name 
  o Address address 
  o Double accountBalance 
} 
 
/** 
 * A Grower is a type of participant in the network 
 */ 
participant Grower extends Business { 
} 
 
/** 
 * A QualityInspector is a type of participant in the network 
 */ 
participant QualityInspector extends Business { 
} 
 
/** 
 * A Customs is a type of participant in the network 
 */ 
participant Customs extends Business { 
} 
 
/** 
 * A Consumer is a type of participant in the network 
 */ 
participant Consumer extends Business { 
} 
 
/** 
 * A Shipper is a type of participant in the network 
 */ 
participant Shipper extends Business { 
} 
 
/** 
 * An Importer is a type of participant in the network 
 */ 
participant Importer extends Business { 
} 
 
/** 
 * A Supermarket is a type of participant in the network 
 */ 
participant Supermarket extends Business { 
}
